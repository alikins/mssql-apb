##############################################################################
## Provision mssql-server
## This role executes much of the needed functionality to provision an
## application using an Ansible Playbook Bundle.  Included in the comments
## below are some sample resources for getting started deploying an application
## to OpenShift.
##############################################################################
- name: Encode bind credentials
  asb_encode_binding:
    fields:
      DB_TYPE: "mssql"
      DB_HOST: "{{ service_instance }}"
      DB_PORT: "1433"
      DB_ADMIN_USER: "SA"
      DB_ADMIN_PASSWORD: "{{ mssql_sa_pw }}"
      DB_NAME: "{{ mssql_db }}"
  when: action == 'provision'

- name: Process ImageStream from template
  template:
    src: imagestream.yaml.j2
    dest: "/tmp/imagestream.yaml"
  register: is

- name: Create ImageStream
  openshift_v1_image_stream:
    name: mssql-server-linux
    namespace: "{{ namespace}}"
    state: present
    src: "{{ is.dest | default(is.path) }}"

- name: Create PVC for persistent deployment
  k8s_v1_persistent_volume_claim:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ volume_size }}G'
    state: '{{ state }}'
  when: _apb_plan_id == "persistent"

- name: Create secret
  k8s_v1_secret:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    string_data:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: '{{ mssql_sa_pw }}'
      MSSQL_PID: '{{ mssql_pid }}'
      MSSQL_LCID: '{{ mssql_lcid | string }}'
      MSSQL_AGENT_ENABLED: '{{ mssql_agent | string }}'
      MSSQL_MEMORY_LIMIT_MB: '{{ (( memory_limit | int ) * 1000 ) | string }}'
    state: '{{ state }}'


##############################################################################
## A Kubernetes service serves as an internal load balancer.  It identifies a
## set of replicated pods in order to proxy the connections it receives to them.
## https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html#services
##############################################################################
- name: Create '{{ service_instance }}' service
  k8s_v1_service:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    ports:
      - name: '{{ service_name }}'
        port: 1433
        target_port: 1433
    state: '{{ state }}'
  register: mssql_service


##############################################################################
## An OpenShift Origin deployment configuration provides a replication
## controller, spins up pods, and also provides the ability to transition from
## one deployment of an image to a new one.
## https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
##############################################################################
- name: Create ephemeral deployment config
  openshift_v1_deployment_config:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    replicas: 1
    strategy_type: Recreate
    strategy_recreate_params:
      post:
        failurePolicy: Ignore
        execNewPod:
          containerName: '{{ service_name }}'
          env:
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ service_instance }}'
                  key: MSSQL_SA_PASSWORD
          command:
            - uid_entrypoint
            - /bin/sh
            - -c
            - |
              sqlcmd -S {{ service_instance }} -U SA -P "$MSSQL_SA_PASSWORD" -Q "IF DB_ID('{{ mssql_db }}') IS NULL
              BEGIN
                CREATE DATABASE {{ mssql_db }}
              END"
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    spec_template_metadata_labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    containers:
    - envFrom:
      - secretRef:
          name: '{{ service_instance }}'
      image: '{{ mssql_image }}:{{ mssql_image_tag }}'
      imagePullPolicy: '{{ mssql_image_pull }}'
      name: '{{ service_name }}'
      livenessProbe:
        initialDelaySeconds: 30
        tcpSocket:
          port: 1433
        timeoutSeconds: 1
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -i
          - -c
          - sqlcmd -S localhost -U SA -P "$MSSQL_SA_PASSWORD" -Q "SELECT Name from sys.Databases"
        initialDelaySeconds: 10
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ memory_limit }}G'
        requests:
          memory: '{{ memory_request }}G'
      ports:
      - container_port: 1433
        protocol: TCP
      volumeMounts:
      - name: '{{ mssql_data_volume_name }}'
        mountPath: '{{ mssql_data_path }}'
    volumes:
    - name: '{{ mssql_data_volume_name }}'
      emptyDir: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      image_change_params:
        automatic: true
        container_names:
          - '{{ service_name }}'
        _from:
          kind: ImageStreamTag
          name: 'mssql-server-linux:{{ mssql_image_tag }}'
          namespace: '{{ namespace }}'
    state: '{{ state }}'
  when: _apb_plan_id != "persistent"

- name: Create persistent deployment config
  openshift_v1_deployment_config:
    name: '{{ service_instance }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    replicas: 1
    strategy_type: Recreate
    strategy_recreate_params:
      post:
        failurePolicy: Ignore
        execNewPod:
          containerName: '{{ service_name }}'
          env:
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ service_instance }}'
                  key: MSSQL_SA_PASSWORD
          command:
            - uid_entrypoint
            - /bin/sh
            - -c
            - |
              sqlcmd -S {{ service_instance }} -U SA -P "$MSSQL_SA_PASSWORD" -Q "IF DB_ID('{{ mssql_db }}') IS NULL
              BEGIN
                CREATE DATABASE {{ mssql_db }}
              END"
    selector:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    spec_template_metadata_labels:
      app: '{{ service_instance }}'
      service: '{{ service_instance }}'
    containers:
    - envFrom:
      - secretRef:
          name: '{{ service_instance }}'
      image: '{{ mssql_image }}:{{ mssql_image_tag }}'
      imagePullPolicy: '{{ mssql_image_pull }}'
      name: '{{ service_name }}'
      livenessProbe:
        initialDelaySeconds: 30
        tcpSocket:
          port: 1433
        timeoutSeconds: 1
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -i
          - -c
          - sqlcmd -S localhost -U SA -P "$MSSQL_SA_PASSWORD" -Q "SELECT Name from sys.Databases"
        initialDelaySeconds: 10
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ memory_limit }}G'
        requests:
          memory: '{{ memory_request }}G'
      ports:
      - container_port: 1433
        protocol: TCP
      volumeMounts:
      - name: '{{ mssql_data_volume_name }}'
        mountPath: '{{ mssql_data_path }}'
    volumes:
    - name: '{{ mssql_data_volume_name }}'
      persistent_volume_claim:
        claim_name: '{{ service_instance }}'
    triggers:
    - type: ConfigChange
    - type: ImageChange
      image_change_params:
        automatic: true
        container_names:
          - '{{ service_name }}'
        _from:
          kind: ImageStreamTag
          name: 'mssql-server-linux:{{ mssql_image_tag }}'
          namespace: '{{ namespace }}'
    state: '{{ state }}'
  when: _apb_plan_id == "persistent"


##############################################################################
## Create a new database.
##############################################################################
- block:
  - name: Wait for mssql to come up
    wait_for:
      port: 1433
      host: "{{ mssql_service.service.spec.cluster_ip }}"
      timeout: 300

  - name: Create table
    mssql_db:
      login_host: "{{ mssql_service.service.spec.cluster_ip }}"
      login_user: SA
      login_password: '{{ mssql_sa_pw }}'
      name: '{{ mssql_db }}'
      state: '{{ state }}'
