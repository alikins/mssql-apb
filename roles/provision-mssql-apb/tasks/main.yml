##############################################################################
## Provision mssql-server
## This role executes much of the needed functionality to provision an
## application using an Ansible Playbook Bundle.  Included in the comments
## below are some sample resources for getting started deploying an application
## to OpenShift.
##############################################################################
- name: create secret
  k8s_v1_secret:
    name: '{{ service_name }}-{{ _apb_service_instance_id }}'
    namespace: '{{ namespace }}'
    string_data:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: '{{ mssql_sa_pw }}'
    state: '{{ state }}'


##############################################################################
## An OpenShift Origin deployment configuration provides a replication
## controller, spins up pods, and also provides the ability to transition from
## one deployment of an image to a new one.
## https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
##############################################################################
- name: create deployment config
  openshift_v1_deployment_config:
    name: '{{ service_name }}-{{ _apb_service_instance_id }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_name }}-{{ _apb_service_instance_id }}'
      service: '{{ service_name }}-{{ _apb_service_instance_id }}'
    replicas: 1
    selector:
      app: '{{ service_name }}-{{ _apb_service_instance_id }}'
      service: '{{ service_name }}-{{ _apb_service_instance_id }}'
    spec_template_metadata_labels:
      app: '{{ service_name }}-{{ _apb_service_instance_id }}'
      service: '{{ service_name }}-{{ _apb_service_instance_id }}'
    containers:
    - envFrom:
      - secretRef:
          name: '{{ service_name }}-{{ _apb_service_instance_id }}'
      image: '{{ mssql_image }}:{{ mssql_image_tag }}'
      name: '{{ service_name }}'
      livenessProbe:
        initialDelaySeconds: 30
        tcpSocket:
          port: 1433
        timeoutSeconds: 1
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -i
          - -c
          - sqlcmd -S localhost -U SA -P "$MSSQL_SA_PASSWORD" -Q "SELECT Name from sys.Databases"
        initialDelaySeconds: 10
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ memory_limit }}'
        requests:
          memory: '{{ memory_request }}'
      ports:
      - container_port: 1433
        protocol: TCP
      volumeMounts:
      - name: '{{ mssql_data_volume_name }}'
        mountPath: '{{ mssql_data_path }}'
    volumes:
    - name: '{{ mssql_data_volume_name }}'
      emptyDir: {}
    state: '{{ state }}'


##############################################################################
## A Kubernetes service serves as an internal load balancer.  It identifies a
## set of replicated pods in order to proxy the connections it receives to them.
## https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html#services
##############################################################################
- name: create '{{ service_name }}-{{ _apb_service_instance_id }}' service
  k8s_v1_service:
    name: '{{ service_name }}-{{ _apb_service_instance_id }}'
    namespace: '{{ namespace }}'
    labels:
      app: '{{ service_name }}-{{ _apb_service_instance_id }}'
      service: '{{ service_name }}-{{ _apb_service_instance_id }}'
    selector:
      app: '{{ service_name }}-{{ _apb_service_instance_id }}'
      service: '{{ service_name }}-{{ _apb_service_instance_id }}'
    ports:
      - name: '{{ service_name }}-{{ _apb_service_instance_id }}'
        port: 1433
        target_port: 1433
    state: '{{ state }}'
  register: mssql_service

- name: encode bind credentials
  asb_encode_binding:
    fields:
      DB_TYPE: "mssql"
      DB_HOST: "{{ service_name }}-{{ _apb_service_instance_id }}"
      DB_PORT: "1433"
      DB_ADMIN_USER: "SA"
      DB_ADMIN_PASSWORD: "{{ mssql_sa_pw }}"
      DB_NAME: "{{ mssql_db }}"
  when: action == 'provision'


##############################################################################
## Create a new database.
##############################################################################
- block:
  - name: Wait for mssql to come up
    wait_for:
      port: 1433
      host: "{{ mssql_service.service.spec.cluster_ip }}"
      timeout: 300

  - name: Create table
    mssql_db:
      login_host: "{{ mssql_service.service.spec.cluster_ip }}"
      login_user: SA
      login_password: '{{ mssql_sa_pw }}'
      name: '{{ mssql_db }}'
      state: present
